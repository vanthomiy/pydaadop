services:
  
  extended-setup-api:
    build:
      context: .
      dockerfile: api.Dockerfile
      args:
        FAST_API_BASE_URL: ${FAST_API_BASE_URL}
        FAST_API_PORT: ${FAST_API_PORT}
    container_name: pydaadop-extended-example-api
    ports:
      - "${FAST_API_PORT}:${FAST_API_PORT}"
    env_file:
      - example.env
    networks:
      - pydaadop-extended-example-network

  extended-setup-mongo:
    image: mongo:latest
    command: mongod --port ${MONGO_PORT}
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASS}
    container_name: pydaadop-extended-example-mongo
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"  # Expose MongoDB on port
    volumes:
      - mongo_data:/data/db  # Persist MongoDB data
    networks:
      - pydaadop-extended-example-network

  extended-setup-init:
    build:
      context: .
      dockerfile: init.Dockerfile  # Assuming the custom Dockerfile is named Dockerfile
    container_name: pydaadop-extended-example-init
    depends_on:
      - extended-setup-api
    env_file:
      - example.env
    networks:
      - pydaadop-extended-example-network  # Shared network
    restart: "no"  # Ensure this service doesn't restart unnecessarily

volumes:
  mongo_data: # Define a named volume for MongoDB data persistence

networks:
  pydaadop-extended-example-network:
    driver: bridge  # Define the network with a driver