name: Auto Setup Branches

on:
  push:
    branches:
      - main
    paths:
      - 'examples/configuration.yml'
      - 'examples/**'
      - '.github/workflows/auto_setup_release.yml'

jobs:
  # ─── JOB 1: Generate the matrix from configuration ─────────────────────────────
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PyYAML
        run: pip install PyYAML

      - name: Generate matrix from configuration file
        id: set-matrix
        run: |
          python - << 'EOF'
          import yaml, json, sys
          try:
              with open('examples/configuration.yml', 'r') as f:
                  # The configuration file is expected to be a YAML list
                  configs = yaml.safe_load(f)
          except Exception as e:
              sys.exit(f"Failed to load configuration: {e}")

          matrix = {"include": []}
          for conf in configs:
              # Each block must have SETUP_NAME and FILE_MAPPINGS keys.
              setup_name = conf.get("SETUP_NAME")
              file_mappings = conf.get("FILE_MAPPINGS")
              if not setup_name or not file_mappings:
                  sys.exit("Each configuration block must include SETUP_NAME and FILE_MAPPINGS")
              matrix["include"].append({
                  "setup_name": setup_name,
                  "file_mappings": file_mappings
              })
          print("::set-output name=matrix::" + json.dumps(matrix))
          EOF

  # ─── JOB 2: Process each setup from the matrix ─────────────────────────────
  update-branch:
    name: Update Branch for Setup
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Display setup info
        run: |
          echo "Processing setup: ${{ matrix.setup_name }}"
          echo "File mappings:"
          echo "${{ matrix.file_mappings }}"

      # ─── Copy files to a temporary folder using file mappings ─────────────
      - name: Copy release files to temporary folder
        run: |
          mkdir -p /tmp/release-files
          # Process each line (delimiter is a colon) from the file mappings.
          echo "${{ matrix.file_mappings }}" | while IFS=: read -r dest src; do
            [ -z "$dest" ] && continue
            echo "Copying $src to /tmp/release-files/$dest"
            cp "$src" "/tmp/release-files/$dest"
          done

      # ─── Switch to (or create) branch for the setup ─────────────
      - name: Switch to or create setup branch
        run: |
          SETUP_BRANCH="${{ matrix.setup_name }}"
          if git show-ref --verify --quiet refs/heads/${SETUP_BRANCH}; then
            echo "Branch exists, switching to ${SETUP_BRANCH}..."
            git checkout ${SETUP_BRANCH}
          else
            echo "Branch does not exist. Creating ${SETUP_BRANCH}..."
            git checkout -b ${SETUP_BRANCH}
          fi

      # ─── Clean branch files ─────────────
      - name: Clean branch files
        run: |
          git rm -rf . || true
          git commit -m "Cleanup ${SETUP_BRANCH} branch" || echo "No files to remove"

      # ─── Copy files from temporary folder into branch root ─────────────
      - name: Copy files from temporary folder into branch root
        run: |
          echo "${{ matrix.file_mappings }}" | while IFS=: read -r dest _; do
            [ -z "$dest" ] && continue
            echo "Copying /tmp/release-files/$dest to ./$dest"
            cp "/tmp/release-files/$dest" "./$dest"
          done
          rm -rf /tmp/release-files

      # ─── Configure Git before committing ─────────────
      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"

      # ─── Commit and push the new files ─────────────
      - name: Commit and push files to branch
        run: |
          # Extract destination filenames and add them to Git.
          files=$(echo "${{ matrix.file_mappings }}" | awk -F: '{print $1}' | paste -sd " " -)
          echo "Files to add: $files"
          git add $files
          git commit --allow-empty -m "Prepare ${{ matrix.setup_name }} branch update"
          git push origin "${{ matrix.setup_name }}" --force

      # ─── (Optional) Protect the branch so only GitHub Actions can update it ─────────────
      - name: Protect branch via API
        if: ${{ github.event_name == 'push' }}  # run only on push events
        env:
          # Replace GITHUB_TOKEN with a token that has admin rights if needed.
          REPO: ${{ github.repository }}
          BRANCH: ${{ matrix.setup_name }}
        run: |
          echo "Protecting branch ${BRANCH}..."
          curl -X PUT -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${REPO}/branches/${BRANCH}/protection \
            -d '{
              "required_status_checks": null,
              "enforce_admins": true,
              "required_pull_request_reviews": null,
              "restrictions": {
                "users": [],
                "teams": []
              }
            }'
